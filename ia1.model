[basic]
name=ia1
arrayed=false
term=termOS//can be either data or derived.  Must be <=lastProjectionPeriod.  From valuation date.
start=elapsedTime//similarly.  phase0 rolls back to here (but no earlier than firstprojectionperiod) and phase1 starts from here (but no earlier than firstprojectionperiod).  If absent then use firstProjectionPeriod instead.
firstProjectionPeriod=-12
lastProjectionPeriod=600
batchSizeExternal=1000000//used by calling c
batchSizeInternal=50000
[end]

[esg]
   riskFreeRate[50]//arrayed1-d
   swapVol[20][20]//arrayed 2-d
   volCf//scalar
[end]

[data]//real, int or enum.  Scalar or arrayed.
sex:sex[2]
ageYears_d:int[2]
ageMonths_d:int[2]
stateOfHealth:health[2]
pensLevel:hilo
occ:occ[2]
sector:sector[2]
poCode:poCode
scheme:scheme
inPayment:inPayment
dateLeaveYear:int
dateLeaveMonth:int
NRD:int
GMP:real[5]
totalPension:real
gteePeriod:int
spousePropn:real
overlap:int
mainLife:int
smoker:smoker[2]
elapsedTime:int//used for NB
[end]

[common]//one liners only - can appear anywhere in this file but will appear first in the generated model in main
maxAge=120
valYear=2018
valMonth=12
[end]

[derived]//scalar or arrayed, one line formula only (allows line continuation) - any bigger: needs a calc.  Could be the term field
termOS:int=maxAge*12-maxi(ageYears[0]*12+ageMonths[0],ageYears[1]*12+ageMonths[1])
GMPplusplus:real[5]=GMP[i1]*1.01//dummy array derived  TODO: need to add implicit array indices for data fields
[end]

[phase]
name=phase0
direction=backwards//ignored for phase0
start=0//phase 0 always starts at 0 and ends at start field (but no earlier than firstprojectionperiod)
###
backThing=
return t
[end]

[phase]
name=phase1
start=firstProjectionPeriod//could be 1, or anything
//start=previousTime
direction=forwards//ignored for phase1

###store=2,type=int//scalar tuple stores 1
initialise=(valYear,valMonth)
(calYear,calMonth)=
    cm0=calMonth__1+1
    cy=if cm0<=12 then calYear__1 else calYear__1+1
    cm=if cm0<=12 then cm0 else 1
return (cy,cm)

###store=0,type=real[2]//arrayed stores none
qx=
age=ageYears
qx_ann=tbl_mort_sch[basisNum,scheme,sex,age,calYear]*
    tbl_mort_hi[age,pensLevel]*tbl_mort_hlt[age,stateOfHealth]*
    tbl_mort_ml[age,mainLife]*tbl_mort_occ[age,occ]*tbl_mort_po[age,poCode]*
    tbl_mort_pub[age,sector]*tbl_mort_smk[age,smoker]
return 1-(1-qx_ann)**(1.0/12.0)

###store=1,type=int[2]//array stores 1
initialise=ageMonths_d
ageMonths=
am0=ageMonths__1+1
return if am0<=11 then am0 else 0

###store=1,type=int[2]//array stores 1
initialise=ageYears_d
ageYears=
if ageMonths!=0 then ageYears__1 else ageYears__1+1

###store=1,type=real[2]//array stores 1
initialise=1
survCF=
return survCF__1*(1-qx)

###__NR1//either output or NR implies store-all  NR1 means ordinary calc but stored multiple time (per basis) - not a whole-array
cflowForNR=
return cflow

###__R1//either output or NR implies store-all
cflowForR=
return cflow

###output//either output or NR implies store-all
cflow=
return totalPension*survCF_LS

###__NR1//NR implies s/a
survCF_LSForRsvs=
return survCF_LS

###
survCF_LS=
return survCF[0]+survCF[1]-survCF[0]*survCF[1]

###output,type=real[NR],overwrites=unadjdRsvs//arrayed over NR bases, calculated in experience, overwrites another calc (e.g. the one from which it is calcuated)
rsvsNR=
res=
if basisNum!=0 then
    0//only valid on experience basis
else
    unadjdRsvs/survCF_LSForRsvs*survCF_LS//NB: if we had wanted to specify indices then it's [][] for arrays.  Can miss out both or array-index, not time.
return res

###output//same as preceding, but explicitly calculating a single value, useful if e.g certain NR reserves have slightly different calcs
rsvsUK=
res=
if basisNum!=0 then
    0
else
    unadjdRsvs[t][RsvUK_disc1]/survCF_LSForRsvs[t][RsvUK_disc1]*survCF_LS
return res

###output//same as preceding, but explicitly calculating a single value, useful if e.g certain NR reserves have slightly different calcs
rsvsS2=
res=
if basisNum!=0 then
    0
else
    unadjdRsvs[t][RsvS2]/survCF_LSForRsvs[t][RsvS2]*survCF_LS
return res

###__NR2,overwrites=cflowForNR//store-all calculated (w/a calc) per NR instance from other store-alls, overwrites existing s/a.  
//only 1 formula because each bit overwrites
//the overwriting is carried out by the function anyway, the overwrites statement is to get the indexing correct i.e. references in experience to unadjrsvs will be to the same indices as cflow had in the s/a array (and does not create separate slots for unadjdrsvs)
unadjdRsvs=
return backDisc2(cflowForNR,vs)//note that user has to supply the "2" and slice the arrays/tables appropriately
    //otherFunction2 cflow[i_rsvsUK_disc1:i_rsvsUK_disc3] vs[0:1]//note that user has to supply the "2" and slice the arrays/tables appropriately
    //otherFunctionEntirely1 cflow[2:3] vs[2:3]//note that user has to supply the "2" and slice the arrays/tables appropriately

###__R2//rebased calculation.  Run forward at rebase times for each R basis and do a w/a calculation (producng a scalar) on the results for bases and subbases.  All very primitive again.  No overwriting.
rsvsRebased=
return backDiscSingle1(cflowForR,tbl_vs t)
[end]

[phase]
name=phase2
direction=static//extra w/a array calcs (in addition to NR at end of phase1)
//start makes no sense here
###//whole-array calculation (not related to bases).  Can only appear in static phase and all formula in static phase are w/a
zog=
return interp(rsvsS2)
[end]

[phase]
name=phase3
direction=backwards//if previous non-static phase was forwards then will fallback from that phase's last time period, else use term field
start=previousTime//first period is the last period of the most recent non-static phase; initialisation referring to calcs only makes sense with this option
###
backThing2=
return t
[end]

[tables]
name=mort_sch,basis=suffix,dims=(scheme,sex,int,int)
name=mort_smoker,dims=(smoker,int)
name=mort_mainlife,dims=(ml,int)
name=mort_health,dims=(health,int)
name=mort_hilo,dims=(hilo,int)
name=mort_occ,dims=(occ,int)
name=mort_sector,dims=(sector,int)
name=mort_postcode,dims=(poCode,int)
name=sch_info,dims(int0,int0)//int0 means has an LB of zero so can ignore deduction of LB in code
name=vs,dims=(int,int)
[end]